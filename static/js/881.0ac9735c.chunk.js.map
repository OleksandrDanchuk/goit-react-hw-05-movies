{"version":3,"file":"static/js/881.0ac9735c.chunk.js","mappings":"2LACA,EAA6B,+BAA7B,EAAmE,yB,SCEtDA,EAAa,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACrBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,wBACGF,EAAYG,KAAI,YAA6B,IAA1BC,EAAyB,EAAzBA,GAAIC,EAAqB,EAArBA,eACtB,OACE,eAAaC,UAAWC,EAAxB,UACE,SAAC,KAAD,CACED,UAAWC,EACXC,GAAE,kBAAaJ,GACfK,MAAO,CAAEC,KAAMT,GAHjB,SAKGI,KANID,EAUZ,KAGN,C,8ICrBD,EAAgC,8BAAhC,EAA6E,6BAA7E,EAA2H,+B,SCKrHO,EAAgB,IAAIC,EAAAA,EAuD1B,EArDe,WACb,OAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAkDF,EAAAA,EAAAA,UAAS,IAA3D,eAAOG,EAAP,KAA0BC,EAA1B,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAaF,EAAaG,IAAI,UAEpCC,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CAGA,IAAMG,EAAY,mCAAG,mHAIPb,EAAca,aAAaH,GAJpB,oBAGfI,KAAQC,EAHO,EAGPA,QAASC,EAHF,EAGEA,cAEnBV,EAAqBS,GAChBC,GAAeC,MAAM,cANT,kDAQjBC,QAAQC,IAAR,MARiB,0DAAH,qDAWlBN,IACAT,EAAcM,EAbb,CAcF,GAAE,CAACA,IAaJ,OACE,iCACE,kBAAMf,UAAWC,EAAkBwB,SAbZ,SAAAC,GAEzB,GADAA,EAAIC,kBACCnB,EAAWoB,OAId,OAHAjB,EAAqB,IACrBG,EAAgB,CAAC,QACjBQ,MAAM,yBAGRR,EAAgB,CAAEe,MAAOrB,GAC1B,EAIG,WACE,kBACEsB,SAAU,gBAAaC,EAAb,EAAGC,OAAUD,MAAb,OAA2BtB,EAAcsB,EAAzC,EACVA,MAAOvB,EACPR,UAAWC,KAEb,mBAAQD,UAAWC,EAAoBgC,KAAK,SAA5C,wBAID,SAACxC,EAAA,EAAD,CAAYC,YAAagB,MAG/B,C,qFCzDYJ,EAAb,kFAIE,WACE,OAAO4B,EAAAA,EAAAA,IAAA,UACF5B,EAAc6B,IADZ,sCAC6C7B,EAAc8B,KAEnE,GARH,0BASE,SAAaL,GACX,OAAOG,EAAAA,EAAAA,IAAA,UACF5B,EAAc6B,IADZ,gCACuC7B,EAAc8B,IADrD,iCACiFL,GAEzF,GAbH,0BAcE,SAAaM,GACX,OAAOH,EAAAA,EAAAA,IAAA,UACF5B,EAAc6B,IADZ,iBACwBE,EADxB,oBAC2C/B,EAAc8B,IADzD,mBAGR,GAlBH,0BAmBE,SAAaC,GACX,OAAOH,EAAAA,EAAAA,IAAA,UACF5B,EAAc6B,IADZ,iBACwBE,EADxB,4BACmD/B,EAAc8B,IADjE,mBAGR,GAvBH,uBAwBE,SAAUC,GACR,OAAOH,EAAAA,EAAAA,IAAA,UACF5B,EAAc6B,IADZ,iBACwBE,EADxB,4BACmD/B,EAAc8B,IADjE,mBAGR,KA5BH,KAAa9B,EACJ6B,IAAM,gCADF7B,EAEJ8B,IAAM,kC","sources":["webpack://goit-react-hw-05-movies/./src/components/ListMovies/ListMovies.module.css?08bb","components/ListMovies/ListMovies.jsx","webpack://goit-react-hw-05-movies/./src/pages/Movies/Movies.module.css?82ee","pages/Movies/Movies.jsx","requestServer.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list__link\":\"ListMovies_list__link__HI5qa\",\"list\":\"ListMovies_list__jtcUy\"};","import { NavLink, useLocation } from 'react-router-dom';\nimport css from './ListMovies.module.css';\n\nexport const ListMovies = ({ arrayMovies }) => {\n  const location = useLocation();\n  return (\n    <ul>\n      {arrayMovies.map(({ id, original_title }) => {\n        return (\n          <li key={id} className={css.list}>\n            <NavLink\n              className={css.list__link}\n              to={`/movies/${id}`}\n              state={{ from: location }}\n            >\n              {original_title}\n            </NavLink>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"movies__input\":\"Movies_movies__input__ZJL4T\",\"movies__form\":\"Movies_movies__form__Zdcl7\",\"movies__button\":\"Movies_movies__button__jsxxT\"};","import { ListMovies } from 'components/ListMovies/ListMovies';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { RequestServer } from 'requestServer';\nimport css from './Movies.module.css';\n\nconst requestServer = new RequestServer();\n\nconst Movies = () => {\n  const [inputValue, setInputValue] = useState('');\n  const [arraySearchMovies, setArraySearchMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const queryValue = searchParams.get('query');\n\n  useEffect(() => {\n    if (!queryValue) {\n      return;\n    }\n    const searchMovies = async () => {\n      try {\n        const {\n          data: { results, total_results },\n        } = await requestServer.searchMovies(queryValue);\n        setArraySearchMovies(results);\n        if (!total_results) alert('Not found!');\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    searchMovies();\n    setInputValue(queryValue);\n  }, [queryValue]);\n\n  const submitButtonSearch = evt => {\n    evt.preventDefault();\n    if (!inputValue.trim()) {\n      setArraySearchMovies([]);\n      setSearchParams({});\n      alert('Enter data to search!');\n      return;\n    }\n    setSearchParams({ query: inputValue });\n  };\n\n  return (\n    <>\n      <form className={css.movies__form} onSubmit={submitButtonSearch}>\n        <input\n          onChange={({ target: { value } }) => setInputValue(value)}\n          value={inputValue}\n          className={css.movies__input}\n        ></input>\n        <button className={css.movies__button} type=\"submit\">\n          Search\n        </button>\n      </form>\n      {<ListMovies arrayMovies={arraySearchMovies} />}\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nexport class RequestServer {\n  static url = 'https://api.themoviedb.org/3/';\n  static key = 'e15edd35c54887c8dc09a01586e49374';\n\n  trendingDay() {\n    return axios.get(\n      `${RequestServer.url}trending/movie/day?api_key=${RequestServer.key}`\n    );\n  }\n  searchMovies(value) {\n    return axios.get(\n      `${RequestServer.url}search/movie?api_key=${RequestServer.key}&language=en-US&query=${value}`\n    );\n  }\n  movieDetails(movieId) {\n    return axios.get(\n      `${RequestServer.url}movie/${movieId}?api_key=${RequestServer.key}&language=en-US`\n    );\n  }\n  movieReviews(movieId) {\n    return axios.get(\n      `${RequestServer.url}movie/${movieId}/reviews?api_key=${RequestServer.key}&language=en-US`\n    );\n  }\n  movieCast(movieId) {\n    return axios.get(\n      `${RequestServer.url}movie/${movieId}/credits?api_key=${RequestServer.key}&language=en-US`\n    );\n  }\n}\n"],"names":["ListMovies","arrayMovies","location","useLocation","map","id","original_title","className","css","to","state","from","requestServer","RequestServer","useState","inputValue","setInputValue","arraySearchMovies","setArraySearchMovies","useSearchParams","searchParams","setSearchParams","queryValue","get","useEffect","searchMovies","data","results","total_results","alert","console","log","onSubmit","evt","preventDefault","trim","query","onChange","value","target","type","axios","url","key","movieId"],"sourceRoot":""}