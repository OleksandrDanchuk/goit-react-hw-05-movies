{"version":3,"file":"static/js/186.5b6ebdd9.chunk.js","mappings":"oOAAaA,EAAc,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC5B,OACE,8BACGA,EAAQC,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1B,OACE,2BACE,uBAAID,KACJ,uBAAIC,MAFGF,EAKZ,KAGN,E,kBCRKG,EAAgB,I,OAAIC,GAgC1B,EA9BgB,WACd,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOT,EAAP,KAAgBU,EAAhB,KAeA,OAdAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,+GAILP,EAAcQ,aAAaN,GAJtB,gBAGLO,EAHK,EAGbC,KAAQD,QAEVJ,EAAWI,GALI,gDAOfE,QAAQC,IAAR,MAPe,yDAAH,qDAUhBL,GACD,GAAE,CAACL,KAGF,8BACGP,EAAQkB,QACP,yBACE,SAACnB,EAAD,CAAaC,QAASA,OAGxB,qEAIP,C,qFCjCYM,EAAb,kFAIE,WACE,OAAOa,EAAAA,EAAAA,IAAA,UACFb,EAAcc,IADZ,sCAC6Cd,EAAce,KAEnE,GARH,0BASE,SAAaC,GACX,OAAOH,EAAAA,EAAAA,IAAA,UACFb,EAAcc,IADZ,gCACuCd,EAAce,IADrD,iCACiFC,GAEzF,GAbH,0BAcE,SAAaf,GACX,OAAOY,EAAAA,EAAAA,IAAA,UACFb,EAAcc,IADZ,iBACwBb,EADxB,oBAC2CD,EAAce,IADzD,mBAGR,GAlBH,0BAmBE,SAAad,GACX,OAAOY,EAAAA,EAAAA,IAAA,UACFb,EAAcc,IADZ,iBACwBb,EADxB,4BACmDD,EAAce,IADjE,mBAGR,GAvBH,uBAwBE,SAAUd,GACR,OAAOY,EAAAA,EAAAA,IAAA,UACFb,EAAcc,IADZ,iBACwBb,EADxB,4BACmDD,EAAce,IADjE,mBAGR,KA5BH,KAAaf,EACJc,IAAM,gCADFd,EAEJe,IAAM,kC","sources":["components/ReviewsList/ReviewsList.jsx","components/Reviews/Reviews.jsx","requestServer.js"],"sourcesContent":["export const ReviewsList = ({ reviews }) => {\n  return (\n    <>\n      {reviews.map(({ id, author, content }) => {\n        return (\n          <li key={id}>\n            <p>{author}</p>\n            <p>{content}</p>\n          </li>\n        );\n      })}\n    </>\n  );\n};\n","import { ReviewsList } from 'components/ReviewsList/ReviewsList';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { RequestServer } from 'requestServer';\n\nconst requestServer = new RequestServer();\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  useEffect(() => {\n    const getReviews = async () => {\n      try {\n        const {\n          data: { results },\n        } = await requestServer.movieReviews(movieId);\n        setReviews(results);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      {reviews.length ? (\n        <ul>\n          <ReviewsList reviews={reviews} />\n        </ul>\n      ) : (\n        <p>We don't have any reviews for this movie</p>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nexport class RequestServer {\n  static url = 'https://api.themoviedb.org/3/';\n  static key = 'e15edd35c54887c8dc09a01586e49374';\n\n  trendingDay() {\n    return axios.get(\n      `${RequestServer.url}trending/movie/day?api_key=${RequestServer.key}`\n    );\n  }\n  searchMovies(value) {\n    return axios.get(\n      `${RequestServer.url}search/movie?api_key=${RequestServer.key}&language=en-US&query=${value}`\n    );\n  }\n  movieDetails(movieId) {\n    return axios.get(\n      `${RequestServer.url}movie/${movieId}?api_key=${RequestServer.key}&language=en-US`\n    );\n  }\n  movieReviews(movieId) {\n    return axios.get(\n      `${RequestServer.url}movie/${movieId}/reviews?api_key=${RequestServer.key}&language=en-US`\n    );\n  }\n  movieCast(movieId) {\n    return axios.get(\n      `${RequestServer.url}movie/${movieId}/credits?api_key=${RequestServer.key}&language=en-US`\n    );\n  }\n}\n"],"names":["ReviewsList","reviews","map","id","author","content","requestServer","RequestServer","movieId","useParams","useState","setReviews","useEffect","getReviews","movieReviews","results","data","console","log","length","axios","url","key","value"],"sourceRoot":""}